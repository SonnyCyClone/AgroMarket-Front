trigger:
  branches:
    include: [ main, master ]
  paths:
    exclude: [ README.md, .gitignore, azure-pipelines.yml, .gitattributes ]

pr:
  branches:
    include: [ '*' ]

# ==== VARIABLES ====
variables:
  azureSubscription: 'sc-azure-agromarket'   #  Service Connection
  artifactName: 'frontend'
  zipName: 'frontend.zip'
  feRoot: '.'                                # Raíz del proyecto Angular
  app_prd: 'az-agromarket-front'             # Nombre  WebApp en Azure

# ==== AGENTE (tu self-hosted Windows) ====
pool:
  name: Default
  demands:
    - agent.name -equals agromarket-agent-win

# =================== STAGES ===================
# --------------- BUILD ----------------
stages:
- stage: Build
  displayName: Build Angular
  jobs:
  - job: build
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 18.x'
      inputs:
        versionSpec: '18.x'

    # Instala deps y compila Angular (PowerShell)
    - powershell: |
        Set-StrictMode -Version Latest
        cd "$(feRoot)"
        # si ci falla por peer deps, cae a install
        npm ci 2>$null; if ($LASTEXITCODE -ne 0) { npm install --legacy-peer-deps }
        npm run build -- --configuration production --output-path "dist"
      displayName: 'npm ci / install & ng build'

    # empaqueta a .zip en el staging de artefactos (PowerShell)
    - powershell: |
        $srcRoot = "$(Build.SourcesDirectory)"
        $distRoot = Join-Path $srcRoot 'dist'
        # toma la primera carpeta generada dentro de dist
        $sub = Get-ChildItem -Directory $distRoot | Select-Object -First 1
        if (-not $sub) { throw "No se encontró carpeta de salida en $distRoot" }

        $content = Join-Path $sub.FullName 'browser'
        if (-not (Test-Path $content)) { $content = $sub.FullName }

        $webConfig = Join-Path $srcRoot 'web.config'
        if (-not (Test-Path $webConfig)) { throw "Falta web.config en la raíz del repo." }
        Copy-Item -Force $webConfig (Join-Path $content 'web.config')

        $outDir = "$(Build.ArtifactStagingDirectory)"
        New-Item -ItemType Directory -Force -Path $outDir | Out-Null
        $zipPath = Join-Path $outDir "$(zipName)"
        if (Test-Path $zipPath) { Remove-Item -Force $zipPath }
        Compress-Archive -Path (Join-Path $content '*') -DestinationPath $zipPath -Force
      displayName: 'crear ZIP'

    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefacto'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

# --------------- DEPLOY PRD -------------
- stage: Deploy_PRD
  displayName: Deploy to PRD
  dependsOn: Build
  condition: and(succeeded(), in(variables['Build.SourceBranchName'], 'main','master'))
  jobs:
  - deployment: deploy_prd
    environment: 'front-prd'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: $(artifactName)

          - task: AzureWebApp@1
            displayName: 'Deploy to $(app_prd)'
            inputs:
              azureSubscription: '$(azureSubscription)'   # Debe existir como Service Connection ARM
              appType: 'webApp'
              appName: '$(app_prd)'
              package: '$(Pipeline.Workspace)/$(artifactName)/$(zipName)'
